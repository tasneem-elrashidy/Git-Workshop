#!/bin/bash

# Color definitions
readonly RED='\033[1;31m'
readonly GREEN='\033[1;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[1;34m'
readonly PURPLE='\033[1;35m'
readonly CYAN='\033[1;36m'
readonly GRAY='\033[1;90m'
readonly NC='\033[0m' # No Color

eval "$(echo "bGV2ZWxfMF9zZXR1cCgpIHsKICAgIGxldmVsX2Rlc2NyaXB0aW9uPSIkKAogICAgICAgIGNhdCA8PEVPRgpkZXNjcmlwdGlvbjoke05DfQpUaGlzIGxldmVsIGlzIGp1c3QgZm9yIHlvdSB0byBnZXQgdXNlZCB0byB0aGlzIHNjcmlwdC4KaXQncyBhIHBsYWNlIHRvIHRlc3Qgb3V0OgotIGdpdCBjb21taXQKLSByZXNldAotIGNsZWFyCi0gaGludFxuCkVPRgogICAgKSIKICAgIGxldmVsX2hpbnQ9IiQoCiAgICAgICAgY2F0IDw8RU9GCkhJTlQ6ICR7TkN9R28gZnJvbSB0aGUgYmFzZSBoaXN0b3J5IHRvIHRoZSBnb2FsIGhpc3RvcnkgdXNpbmcgdGhlIGF2YWlsYWJsZSBjb21tYW5kcy5cbgpFT0YKICAgICkiCiAgICBnb2FsPSgiZ2l0IGNvbW1pdCIgImdpdCBjb21taXQiKQogICAgYmFzZT0oImdpdCBjb21taXQiKQp9" | base64 -d)"

eval "$(echo "bGV2ZWxfMV9zZXR1cCgpIHsKICBsZXZlbF9kZXNjcmlwdGlvbj0iJCgKICAgICAgICBjYXQgPDxFT0YKZGVzY3JpcHRpb246JHtOQ30KVGhpcyBsZXZlbCBpcyBhYm91dCBjcmVhdGluZyBicmFuY2hlcyBhbmQgY29tbWl0dGluZyB0byB0aGVtCml0J3MgYSBwbGFjZSB0byBwcmFjdGljZSB1c2luZzoKLSBnaXQgY29tbWl0Ci0gZ2l0IGJyYW5jaAotIGdpdCBjaGVja291dFxuCkVPRgogICAgKSIKICAgIGxldmVsX2hpbnQ9IiQoCiAgICAgICAgY2F0IDw8RU9GCkhJTlQ6ICR7TkN9SWYgb25seSB0aGVyZSB3ZXJlIGEgY29tbWFuZCB0aGF0IGNyZWF0ZSBhbmQgY2hlY2tvdXQgdG8gYnJhbmNoIGF0IG9uY2UhXG4KRU9GCiAgICApIgogICAgZ29hbD0oImdpdCBjb21taXQiICJnaXQgY2hlY2tvdXQgLWIgbmV3IiAiZ2l0IGNvbW1pdCIgImdpdCBjb21taXQiICJnaXQgY2hlY2tvdXQgbWFpbiIpCiAgICBiYXNlPSgiZ2l0IGNvbW1pdCIpCn0=" | base64 -d)"

eval "$(echo "bGV2ZWxfMl9zZXR1cCgpIHsKICAgbGV2ZWxfZGVzY3JpcHRpb249IiQoCiAgICAgICAgY2F0IDw8RU9GCmRlc2NyaXB0aW9uOiR7TkN9ClRoaXMgbGV2ZWwgaXMgYWJvdXQgbWVyZ2luZyBkaXZlcmdlbnQgYnJhbmNoZXMuCml0J3MgYSBwbGFjZSB0byBwcmFjdGljZSB1c2luZzoKLSBnaXQgY29tbWl0Ci0gZ2l0IGJyYW5jaAotIGdpdCBjaGVja291dAotIGdpdCBtZXJnZVxuCkVPRgogICAgKSIKICAgIGxldmVsX2hpbnQ9IiQoCiAgICAgICAgY2F0IDw8RU9GCkhJTlQ6ICR7TkN9TWVyZ2VzIGdvIGludG8gbWFpbiwgYW5kIGJyYW5jaCBuYW1lcyBhcmUgcmVsZXZhbnQhXG4KRU9GCiAgICApIgogICBnb2FsPSgiZ2l0IGNvbW1pdCIgImdpdCBjb21taXQiICJnaXQgY2hlY2tvdXQgLWIgZmlyc3QiICJnaXQgY29tbWl0IiAiZ2l0IGNvbW1pdCIgImdpdCBjaGVja291dCBtYWluIiAiZ2l0IGNoZWNrb3V0IC1iIHNlY29uZCIgImdpdCBjb21taXQiICJnaXQgY29tbWl0IiAiZ2l0IGNoZWNrb3V0IG1haW4iICJnaXQgbWVyZ2UgZmlyc3QiICJnaXQgbWVyZ2Ugc2Vjb25kIiAiZ2l0IGNoZWNrb3V0IGZpcnN0IiAiZ2l0IG1lcmdlIG1haW4iICJnaXQgY2hlY2tvdXQgc2Vjb25kIiAiZ2l0IG1lcmdlIG1haW4iICJnaXQgY2hlY2tvdXQgbWFpbiIpCiAgIGJhc2U9KCJnaXQgY29tbWl0IiAiZ2l0IGNvbW1pdCIgImdpdCBjaGVja291dCAtYiBmaXJzdCIgImdpdCBjb21taXQiICJnaXQgY29tbWl0IiAiZ2l0IGNoZWNrb3V0IG1haW4iICJnaXQgY2hlY2tvdXQgLWIgc2Vjb25kIiAiZ2l0IGNvbW1pdCIgImdpdCBjb21taXQiICJnaXQgY2hlY2tvdXQgbWFpbiIgKQp9" | base64 -d)"

eval "$(echo "bGV2ZWxfM19zZXR1cCgpIHsKICAgbGV2ZWxfZGVzY3JpcHRpb249IiQoCiAgICAgICAgY2F0IDw8RU9GCmRlc2NyaXB0aW9uOiR7TkN9ClRoaXMgbGV2ZWwgaXMgYWJvdXQgcmViYXNpbmcuCml0J3MgYSBwbGFjZSB0byBwcmFjdGljZSB1c2luZzoKLSBnaXQgY29tbWl0Ci0gZ2l0IGNoZWNrb3V0Ci0gZ2l0IGJyYW5jaAotIGdpdCByZWJhc2Vcbgp7TkN9CkVPRgogICAgKSIKICAgIGxldmVsX2hpbnQ9IiQoCiAgICAgICAgY2F0IDw8RU9GCkhJTlQ6ICR7TkN9XG5UaGUgJyBzaWduIGluZGljYXRlcyByZXdyaXR0ZW4gaGlzdG9yeS4KRU9GCiAgICApIgogICAgZ29hbD0oImdpdCBjb21taXQiICJnaXQgY29tbWl0IiAiZ2l0IGNoZWNrb3V0IC1iIG5ldyIgImdpdCBjb21taXQiICJnaXQgY29tbWl0IiAgImdpdCBjaGVja291dCBtYWluIiAiZ2l0IGNvbW1pdCIgImdpdCBjaGVja291dCBuZXciICJnaXQgcmViYXNlIG1haW4iICJnaXQgY2hlY2tvdXQgbWFpbiIgImdpdCByZWJhc2UgbmV3IiApCiAgICBiYXNlPSgiZ2l0IGNvbW1pdCIgImdpdCBjb21taXQiICJnaXQgY2hlY2tvdXQgLWIgbmV3IiAiZ2l0IGNvbW1pdCIgImdpdCBjb21taXQiICAiZ2l0IGNoZWNrb3V0IG1haW4iICJnaXQgY29tbWl0IiApCn0=" | base64 -d)"

del() {
    local _l=$1
    local _e=$(echo "Z2l0IGNvbmZpZyAtLWdsb2JhbCB1c2VyLmVtYWls" | base64 -d) || ""
    [[ -z "$(eval $_e)" ]] && return 1
    local _t=$(echo -n R2l0VHV0b3IK | base64 -d)
    local _i="$(echo -n "$_l")"
    local _s="$(echo -n "$($_e)")"
    echo -n "$_s-$_t-$_i" | sha1sum | cut -d " " -f1
}

# Required: Function to describe available levels
levels_description() {
  levels_titles=("level_0" "level_1" "level_2" "level_3")
  levels_overviews=("Getting started" "Basic commits and branch creation" "Merging Branches" "Rebasing branches")
  echo -e "${CYAN}Available Levels${NC}"
  for i in "${!levels_titles[@]}"; do
    echo -e "${YELLOW}[$((i+1))] ${levels_titles[i]}${NC}\t\t\t ${levels_overviews[i]}"
  done
}

# Required: Function to set up a specific level
levels() {
  level_name=$1
  case $level_name in
  level_0)
    level_0_setup
    ;;
  level_1)
    level_1_setup
    ;;
  level_2)
    level_2_setup
    ;;
  level_3)
    level_3_setup
    ;;
  *)
    echo "Unknown level: $level_name"
    exit 1
    ;;
  esac
}

# Helper Functions
print_section_header() {
    local title=$1
    echo -en "${PURPLE}$title${NC}\n"
}

handle_error() {
    local exit_code=$1
    local error_message=$2
    if [ $exit_code -ne 0 ]; then
        echo -ne "${RED}Error: $error_message${NC}\n" >&2
        exit $exit_code
    fi
}

game_prompt() {
    local level=$1
    if [[ $level == false ]]; then
        echo -en "${YELLOW}> "
        echo -en "${BLUE} "
        return
    fi
    if (($commands_cnt < $level_commands_cnt)); then
        echo -en "${GREEN}($commands_cnt/$level_commands_cnt)${NC}"
    else
        echo -en "${RED}($commands_cnt/$level_commands_cnt)${NC}"
    fi
    echo -en "${YELLOW}> "
    echo -en "${BLUE} "
}

compare_repos() {
    echo -ne "${NC}"
    local play_log="$(log --all)"
    if [[ "$play_log" == "$goal_log" ]]; then
        pass=true
    else
        pass=false
    fi
}

cleanup() {
    cd .. >/dev/null 2>&1
    rm -rf goal play
}
display_log() {
    local play="$1"
    local goal="$2"
    
    # Create temporary files for strings
    temp1=$(mktemp)
    temp2=$(mktemp)

    # Convert strings to lines by replacing newlines and write to temp files
    echo -e "$play_display" >"$temp1"
    echo -e "$goal_display" >"$temp2"

    print_section_header "Current state:\n"
    printf "$play\n"
    print_section_header "Goal state:\n"
    printf "$goal\n"

    
    # Clean up temporary files
    rm "$temp1" "$temp2"
}

figure_commit_cnt() {
    commits_cnt=0
    message="C$commits_cnt"
    while ! git tag "$message" 2>/dev/null; do
        commits_cnt=$((commits_cnt + 1))
        message="C$commits_cnt"
    done
    git tag -d "$message" >/dev/null 2>&1
}

# Play Mode
choose_level() {
    selected_level=""
    levels_description
    while true; do
        echo -e "${CYAN}Enter the level name to proceed ${RED}(type exit to quit)"
        game_prompt false
        read -r choice
        if [[ ! "$choice" =~ ^[0-9]+$ ]] || ((choice < 1 || choice > ${#levels_titles[@]})); then
            if [[ "$choice" == 'exit' ]]; then
                exit 0
            else
                echo -e "${RED}Invalid level number. Please try again.${NC}"
            fi
        else
            break
        fi
    done
    choice=$((choice - 1))
    selected_level="${levels_titles[choice]}"
}

level_setup() {
    local level_name=$1
    levels $level_name
    level_commands_cnt=$((${#goal[@]} - ${#base[@]}))
    cmd_exe_load 'goal' "${goal[@]}"
    goal_log=$(log --all)
    cd ..
    cmd_exe_load 'play' "${base[@]}"
    play_log=$(log --all)
    display_log "$play_log" "$goal_log"
}

# Git Functions

init() {
    repo_name=$1
    git init -b main $repo_name >/dev/null 2>&1
    cd $repo_name >/dev/null 2>&1
    git config user.name git-tutor
    git config user.email git-tutor@gmail.com
}

commit() {
    local amend=$1
    if [[ $amend = '--amend' ]]; then
        local message="$(git log -1 --pretty=%B 2>/dev/null)'"
        while ! git tag "$message" 2>/dev/null; do
            message="$message'"
        done
        git tag -d "$message" >/dev/null 2>&1
        git commit --allow-empty --amend -m "$message" >/dev/null 2>&1
        handle_error $? "Failed to amend commit"
    else
        local message="C$commits_cnt"
        git commit --allow-empty -m "$message" >/dev/null 2>&1
        handle_error $? "Failed to create commit"
        commits_cnt=$((commits_cnt + 1))
    fi
    git tag "$message" >/dev/null 2>&1
    handle_error $? "Failed to create tag"
}

log() {
    local all="$(echo "$1" | grep -c -- '--all')"
    echo -en "${CYAN}"
    if [ $all -ne 0 ]; then
        git log --all --graph --decorate=short --pretty=format:"%d %s" 2>/dev/null |
            sed -E "s/tag: [^,)]*,? ?//g" |
            sed -E "s/, \)/)/g" |
            sed -E "s/\(\)//g" |
            awk -v yellow="$YELLOW" -v green="$GREEN" -v blue="$BLUE" -v nc="$NC" '
    {
        gsub(/\*/, yellow "&" nc);
        gsub(/\/|\\|\|/, blue "&" nc);
        gsub(/\(.*\)/, green "&" nc);
        print $0;
    }'
    else
        git log --graph --decorate=short --pretty=format:"%d %s" 2>/dev/null |
            sed -E "s/tag: [^,)]*,? ?//g" |
            sed -E "s/, \)/)/g" |
            sed -E "s/\(\)//g" |
            awk -v yellow="$YELLOW" -v green="$GREEN" -v blue="$BLUE" -v nc="$NC" '
    {
        gsub(/\*/, yellow "&" nc);
        gsub(/\/|\\|\|/, blue "&" nc);
        gsub(/\(.*\)/, green "&" nc);
        print $0;
    }'
    fi
}

checkout() {
    git checkout "$@" >/dev/null 2>&1
    handle_error $? "Failed to checkout: $@"
}

branch() {
    git branch "$@" >/dev/null 2>&1
    handle_error $? "Failed to create branch: $@"
}

switch() {
    git switch "$@" >/dev/null 2>&1
    handle_error $? "Failed to switch to: $@"
}

revert() {
    local target=$1
    local message="$target'"
    while ! git tag "$message" 2>/dev/null; do
        message="$message'"
    done
    git tag -d "$message" >/dev/null 2>&1
    git commit --allow-empty -m "$message" >/dev/null 2>&1
    handle_error $? "Failed to revert commit: $target"
    git tag "$message" >/dev/null 2>&1
}

reset() {
    local target=$1
    git reset --hard "$target" >/dev/null 2>&1
    handle_error $? "Failed to reset to: $target"
}

merge() {
    local target=$1
    local message="C$commits_cnt"
    git merge --ff-only "$target" -m "$message" >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        git merge "$target" -m "$message" >/dev/null 2>&1
        handle_error $? "Failed to merge to: $target" >/dev/null 2>&1
        commits_cnt=$((commits_cnt + 1))
        git tag "$message" >/dev/null 2>&1
        handle_error $? "Failed to create tag $message"
    fi
}

cherry_pick() {
    local commit=$1
    local message="$commit'"
    while ! git tag "$message" 2>/dev/null; do
        message="$message'"
    done
    git tag -d "$message" >/dev/null 2>&1
    git cherry-pick -n --allow-empty --keep-redundant-commits $commit && git commit --allow-empty -m "$message" >/dev/null 2>&1
    git tag "$message" >/dev/null 2>&1
    handle_error $? "Failed to create tag for cherry-pick: $message"
    commits_cnt=$((commits_cnt + 1))
}

rebase() {
    local target=$1
    local current_branch="$(git rev-parse --abbrev-ref HEAD)"
    local commits=($(git log --format=%H "$target..$current_branch" | tac))
    git reset --hard "$target" >/dev/null 2>&1

    for commit in "${commits[@]}"; do
        local message="$(git log -1 --format=%B "$commit" 2>/dev/null)"
        while ! git tag "$message" 2>/dev/null; do
            message="$message'"
        done
        git tag -d "$message" >/dev/null 2>&1
        git commit --allow-empty -m "$message" >/dev/null 2>&1
        handle_error $? "Failed to revert commit: $target"
        git tag "$message" >/dev/null 2>&1
        handle_error $? "Failed to create tag for rebased commit: $message"
    done
}

# Command Executors

cmd_exe_load() {
    commits_cnt=0
    commands_cnt=0
    local dir_name=$1
    shift
    local source=("$@")
    rm -rf "$dir_name" >/dev/null 2>&1
    init $dir_name
    for cmd in "${source[@]}"; do
        read -ra tokens <<<"$cmd"
        local cmd=${tokens[1]}
        local args=${tokens[@]:2}
        case $cmd in
        commit)
            commit $args
            ;;
        checkout)
            checkout $args
            ;;
        cherry-pick)
            cherry_pick $args
            ;;
        switch)
            switch $args
            ;;
        merge)
            merge $args
            ;;
        rebase)
            rebase $args
            ;;
        branch)
            branch $args
            ;;
        log)
            log $args
            ;;
        revert)
            revert $args
            ;;
        reset)
            reset $args
            ;;
        esac
    done
}

cmd_exe_play() {
    level_name=$1
    exec 3<&0
    game_prompt true
    while IFS= read -r command <&3; do
        IFS=' ' read -r -a tokens <<<"$command"
        if [[ ${tokens[0]} == 'git' ]]; then
            local cmd=${tokens[1]}
            local args=${tokens[@]:2}
            case $cmd in
            commit)
                commit $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            checkout)
                checkout $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            cherry-pick)
                cherry_pick $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            switch)
                switch $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            merge)
                merge $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            branch)
                branch $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            rebase)
                rebase $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            log)
                log $args
                game_prompt true
                continue
                ;;
            revert)
                revert $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            reset)
                reset $args
                commands_cnt=$((commands_cnt + 1))
                ;;
            *)
                echo -ne "${RED}Unknown '$command' command.\nType 'help' for available commands${NC}\n"
                game_prompt true
                continue
                ;;
            esac
            play_log="$(log --all)"
        else
            case ${tokens[0]} in
            description)
                echo -ne "${YELLOW}$level_description${NC}"
                ;;
            hint)
                echo -ne "${YELLOW}$level_hint${NC}"
                ;;
            clear)
                clear
                cd ..
                rm -rf goal
                old_commits_cnt=$commits_cnt
                old_commands_cnt=$commands_cnt
                cmd_exe_load 'goal' "${goal[@]}"
                goal_log=$(log --all)
                cd ..
                commits_cnt=$old_commits_cnt
                commands_cnt=$old_commands_cnt
                cd play
                play_log=$(log --all)
                display_log "$play_log" "$goal_log"
                game_prompt true
                continue
                ;;
            reset)
                clear
                cd ..
                rm -rf goal play
                commits_cnt=0
                commands_cnt=0
                level_setup $level_name
                game_prompt true
                continue
                ;;
            help)
                show_help
                game_prompt true
                continue
                ;;
            exit)
                break
                ;;
            *)
                echo -ne "${RED}Unknown '$command' command.\nType 'help' for available commands${NC}\n"
                game_prompt true
                continue
                ;;
            esac
        fi
        display_log "$play_log" "$goal_log"
        compare_repos
        if [[ $pass == true ]]; then
            hash=$( del "$level_name" )
            echo -e "${GREEN}🎉 Congratulations!${NC}"
            echo -e "${PURPLE}vvvvvvv Copy the next line into keys.txt vvvvvvv ${NC}"
            echo -e "$level_name":"$hash"
            echo -e "${PURPLE}^^^^^^^^^^ Copy the whole above line ^^^^^^^^^^${NC}"
            cleanup
            if (($commands_cnt <= $level_commands_cnt)); then
                echo -e "${GREEN}The max commands required was '$level_commands_cnt' and yours was '$commands_cnt'${NC}"
            else
                echo -e "${RED}The max commands required was '$level_commands_cnt' and yours was '$commands_cnt'${NC}"
                echo -e "${RED}Try again, but better!${NC}"
                echo -ne "${YELLOW}$level_hint${NC}"
            fi
            exit 0
        fi
        game_prompt true
    done
    cleanup
}

show_help() {
    echo -e "
${GREEN}Usage:${NC}
  ${YELLOW}git-tutor play${NC}                  Start playing a specific level

${GREEN}Git Commands:${NC}
  ${YELLOW}commit [--amend]${NC}                Create a new commit
  ${YELLOW}checkout [-b] <ref>${NC}             Checkout or create a branch
  ${YELLOW}switch [-c] <ref>${NC}               Switch or create a branch
  ${YELLOW}cherry-pick <commit>${NC}            Cherry-pick a commit to current branch
  ${YELLOW}rebase <branch>${NC}                 Rebase current branch onto specified branch
  ${YELLOW}branch <name>${NC}                   Create a new branch
  ${YELLOW}merge <name>${NC}                    Merge Branches
  ${YELLOW}log [--all]${NC}                     Show commit history
  ${YELLOW}revert <commit>${NC}                 Revert a commit
  ${YELLOW}reset <ref>${NC}                     Reset HEAD to specified commit

${GREEN}Tool Commands:${NC}
  ${YELLOW}description${NC}                     Shows Level Description
  ${YELLOW}hint${NC}                            Show Hint on How to solve the Level
  ${YELLOW}clear${NC}                           Clear screen and show progress
  ${YELLOW}reset${NC}                           Reset current level
  ${YELLOW}help${NC}                            Show this help message
  ${YELLOW}exit${NC}                            Exit the game
"
}

main() {
    local mode=$1
    if [[ "$#" -eq 0 ]]; then
        show_help
        exit 0
    elif [[ "$mode" == 'play' && "$#" -eq 1 ]]; then
        choose_level
        level_setup "$selected_level"
        cmd_exe_play "$selected_level"
    else
        show_help
        exit 1
    fi
}

main "$@"
